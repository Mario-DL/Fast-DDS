name: Fast-DDS Windows CI reusable workflow

on:
  workflow_call:
    inputs:
      label:
        description: 'ID associated to the workflow. Must univocally identify artifacts.'
        required: true
        type: string
      colcon-args:
        description: 'Extra arguments for colcon cli'
        required: false
        type: string
      cmake-args:
        description: 'Extra arguments for cmake cli'
        required: false
        type: string
      ctest-args:
        description: 'Extra arguments for ctest cli'
        required: false
        type: string
      fastdds_branch:
        description: 'Branch or tag of Fast DDS repository (https://github.com/eProsima/Fast-DDS)'
        required: true
        type: string

defaults:
  run:
    shell: pwsh

jobs:
  reusable-windows-ci:
    runs-on: windows-2019
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'skip-ci') }}
    strategy:
      fail-fast: false
      matrix:
        cmake-config:
          - 'RelWithDebInfo'
        vs-toolset:
          - 'v142'
    steps:
      - name: Sync eProsima/Fast-DDS repository
        uses: eProsima/eProsima-CI/external/checkout@v0
        with:
          path: src/fastrtps

      - name: Get minimum supported version of CMake
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: '3.28.2'

        # TODO: check arguments
      - name: Install colcon
        uses: eProsima/eProsima-CI/windows/install_colcon@v0

      - name: Install Python dependencies
        uses: eProsima/eProsima-CI/windows/install_python_packages@v0
        with:
          packages: vcstool xmlschema

      - name: Install asio and tinyxml2
        run: |
          $tmpdir = New-Item -Path "$Env:TMP\choco_aux" -Type Directory
          iwr -Uri https://github.com/ros2/choco-packages/releases/download/2020-02-24/asio.1.12.1.nupkg -OutFile "$tmpdir\asio.1.12.1.nupkg"
          iwr -Uri https://github.com/ros2/choco-packages/releases/download/2020-02-24/tinyxml2.6.0.0.nupkg -OutFile "$tmpdir\tinyxml2.6.0.0.nupkg"
          choco install -y -s $tmpdir asio tinyxml2
          del $tmpdir -Recurse

          # Need to be very explicit in path location due to poor choice on ros2 choco-package composition
          "CMAKE_PREFIX_PATH=$Env:ProgramData\chocolatey\lib\asio\share\cmake;" +
          "$Env:ProgramData\chocolatey\lib\tinyxml2\share\cmake;$Env:CMAKE_PREFIX_PATH" |
          Out-File $Env:GITHUB_ENV -Append -Encoding OEM

      - name: Prepare colcon workspace
        run: |
          # Get some convenient tools
          Install-Module -Name ConvertBase64Strings -Force -AllowClobber
          Import-Module -name ConvertBase64Strings -Prefix CI
          Install-Module powershell-yaml -Force

          # Nightly job
          if ("${{ inputs.label }}".Contains("nightly"))
          {
              $depends_repos_path = ".\src\fastrtps\.github\workflows\config\nightly_${{ inputs.fastdds_branch }}.repos"
              if (!(Test-Path -Path $depends_repos_path))
              {
                $depends_repos_path = ".\src\fastrtps\.github\workflows\config\nightly_master.repos"
              }
              $meta_path = ".\src\fastrtps\.github\workflows\config\nightly.meta"
          }
          # Either PR or manual
          else
          {
              $depends_repos_path = ".\src\fastrtps\.github\workflows\config\default_ci_${{ inputs.fastdds_branch }}.repos"
              if (!(Test-Path -Path $depends_repos_path))
              {
                $depends_repos_path = ".\src\fastrtps\.github\workflows\config\default_ci_master.repos"
              }
              $meta_path = ".\src\fastrtps\.github\workflows\config\default_ci.meta"
          }
          Write-Output "Selected repos files: $depends_repos_path"
          Write-Output "Selected metas files: $meta_path"

          # Generate the meta file
          "::group::deployed colcon.meta file"
          $meta = Get-Content $meta_path | ConvertFrom-Yaml
          $meta | ConvertTo-Json -Depth 3 | Tee-Object -FilePath ci.meta -Encoding OEM
          "::endgroup::"

          # create source dir and download the sources
          vcs import src --input $depends_repos_path --skip-existing

      - name: Build
        id: build
        continue-on-error: false
        uses: eProsima/eProsima-CI/windows/colcon_build@v0
        with:
          colcon_meta_file: ${{ github.workspace }}/ci.meta
          colcon_build_args: --packages-select fastcdr ${{ inputs.colcon-args }}
          cmake_args: --cmake-args --no-warn-unused-cli ${{ inputs.cmake-args }}
          cmake_args_default: -DCMAKE_CXXFLAGS="/MP /WX"
          cmake_build_type: ${{ matrix.cmake-config }}
          workspace: ${{ github.workspace }}

      - name: Test
        if: ${{ !contains(github.event.pull_request.labels.*.name, 'no-test') &&
                (
                  steps.build.outcome == 'success' &&
                  (
                    steps.build.outputs.BuildWarningsErrors == 0 ||
                    contains(steps.build.outputs.BuildWarningsErrors, 'warning')
                  )
                ) }}
        id: test
        run: |
          # Create a junit file for test results
          $junit = New-Item -Path ./junit.xml -ItemType File
          'JUNIT_LOG=' + $junit.FullName | Out-File $Env:GITHUB_ENV -Append -Encoding OEM

          # add ctest args
          $ctestargs = '${{ inputs.ctest-args }}'.split(" ")

          # Show the arguments
          EchoArgs --packages-select fastrtps --event-handlers=console_direct+ `
            --merge-install --ctest-args $ctestargs --repeat until-pass:3 `
            --timeout 300 --output-junit $junit

          # Run the testing
          "::group::ctest summary"
          colcon test --packages-select fastrtps --event-handlers=console_direct+ `
            --merge-install --ctest-args $ctestargs --repeat until-pass:3 `
            --timeout 300 --output-junit $junit
          "::endgroup::"
